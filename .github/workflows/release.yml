name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  check-helm-readme:
    name: Check Helm README
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Install helm-docs
        run: |
          go install github.com/norwoodj/helm-docs/cmd/helm-docs@latest

      - name: Generate temporary Helm README
        run: |
          # Generate README in a temporary location
          helm-docs -c charts/url-datadog-monitor -o /tmp
          
          # Check if the generated README differs from the committed one
          if ! diff -q /tmp/README.md charts/url-datadog-monitor/README.md &>/dev/null; then
            echo "ERROR: Helm chart README.md is not up to date."
            echo "Please run 'scripts/helm-readme.sh' and commit the changes."
            exit 1
          fi

  build-binaries:
    name: Build binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Set version variables
        id: vars
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "GIT_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Build binaries
        run: |
          # Create directory if it doesn't exist
          mkdir -p bin/release
          
          # Run the build and capture exit code
          make cross-build
          
          # Verify the build output exists
          ls -la bin/release
          
          # Fix permissions to avoid tar issues
          chmod -R 755 bin/release

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: bin/release/
          retention-days: 1

  create-release:
    name: Create release
    runs-on: ubuntu-latest
    needs: [check-helm-readme, build-binaries]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: bin/release
      
      - name: List downloaded artifacts
        run: |
          # Debug downloaded content
          ls -la bin/release
          # Ensure files are executable
          chmod -R 755 bin/release

      - name: Set version variables
        id: vars
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Create a temporary file for the changelog
          CHANGELOG_FILE=$(mktemp)
          
          # Get previous tag or use initial commit if none exists
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            # No previous tag, use all commits
            git log --pretty=format:"* %s (%h)" > $CHANGELOG_FILE
          else
            # Get commits since previous tag
            git log --pretty=format:"* %s (%h)" $PREV_TAG..${{ github.sha }} > $CHANGELOG_FILE
          fi
          
          # Escape the content for GitHub Actions
          CHANGELOG=$(cat $CHANGELOG_FILE)
          # Use GitHub's special delimiters approach for multiline strings
          echo "changelog<<CHANGELOG_DELIMITER" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "CHANGELOG_DELIMITER" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.VERSION }}
          body: |
            ## URL Datadog Monitor ${{ env.VERSION }}

            ### Changes
            ${{ steps.changelog.outputs.changelog }}

            ### Installation

            #### Docker
            ```bash
            docker pull ghcr.io/kuskoman/url-datadog-monitor:${{ env.VERSION }}-standalone-scratch
            docker pull ghcr.io/kuskoman/url-datadog-monitor:${{ env.VERSION }}-operator-scratch
            ```

            #### Binary
            Download the appropriate binary for your platform below.
          files: bin/release/*
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  build-push-docker:
    name: Build and push Docker images
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set version variables
        id: vars
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "GIT_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV

      - name: Build and push standalone-scratch
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/standalone-scratch.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VERSION=${{ env.VERSION }}
            GIT_COMMIT=${{ env.GIT_COMMIT }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          tags: |
            ghcr.io/kuskoman/url-datadog-monitor:${{ env.VERSION }}-standalone-scratch
            ghcr.io/kuskoman/url-datadog-monitor:latest-standalone-scratch
            ghcr.io/kuskoman/url-datadog-monitor:latest-standalone
            ghcr.io/kuskoman/url-datadog-monitor:latest

      - name: Build and push operator-scratch
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/operator-scratch.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VERSION=${{ env.VERSION }}
            GIT_COMMIT=${{ env.GIT_COMMIT }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          tags: |
            ghcr.io/kuskoman/url-datadog-monitor:${{ env.VERSION }}-operator-scratch
            ghcr.io/kuskoman/url-datadog-monitor:latest-operator-scratch
            ghcr.io/kuskoman/url-datadog-monitor:latest-operator

      - name: Build and push standalone-alpine
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/standalone-alpine.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VERSION=${{ env.VERSION }}
            GIT_COMMIT=${{ env.GIT_COMMIT }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          tags: |
            ghcr.io/kuskoman/url-datadog-monitor:${{ env.VERSION }}-standalone-alpine
            ghcr.io/kuskoman/url-datadog-monitor:latest-standalone-alpine

      - name: Build and push operator-alpine
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/operator-alpine.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VERSION=${{ env.VERSION }}
            GIT_COMMIT=${{ env.GIT_COMMIT }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          tags: |
            ghcr.io/kuskoman/url-datadog-monitor:${{ env.VERSION }}-operator-alpine
            ghcr.io/kuskoman/url-datadog-monitor:latest-operator-alpine